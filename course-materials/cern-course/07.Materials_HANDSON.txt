Material: Hands-on

We will keep using the example from the earlier, 'User Interface I' lecture 
under 'G4WORKDIR/TaskC'.

================================================================================

________________________________________________________________________________
1.
Run the application in interactive mode. Use the NIST data base:
  a. print (isotopes, composition, etc) the "Al" element entry
  b. print the list of pre-defined NIST "bio" materials:
  
  
  SOLUTIONS (commands in the session window): 
  a.
  > /material/nist/printElement Al 
  b. 
  > /material/nist/listMaterials bio
  

________________________________________________________________________________
2.  
From now on, we will use the application in batch mode. 

  a. Identify and investigate the material definitions in the B1 application 
     B1DetectorConstruction::Construct() method!
     
  b. Print the Envelope material with all its properties (use G4cout)!
  
  c. Change the Envelope material from Water to liquid Argon using the NIST 
     material data base.
  
  d. Define your own Water material instead of the predefined NIST one (see 
     slide #9) and use it as the Envelop material.


  SOLUTIONS (always build and run the application):
   a. Open the B1DetectorConstruction class Construct() method and see.
   
   b. Add the following line after the construction of the "env_mat":
   
      G4cout << env_mat << G4endl; 
      
   c. Change the "G4_WATER" string in the "env_mat" construction to "G4_lAr"
   
   d. See slide #9 to define elements  (H, O) and to construct the material!     
 


________________________________________________________________________________
3.  
We will create Uranium material in 3 different ways then we will compare their 
properties by printing them out (in B1DetectorConstruction::Construct() method):


   a. Create the pre-defined NIST Uranium material (see slide #15)! 
 
   b. Create Uranium material as simple (single element) material with natural 
      isotope abundance using the appropriate G4Material constructor with: name= 
      name = "Natural U mat", atomic number = 92, molar mass = 238.03*g/mole and 
      density = 18.95*g/cm3 (see slide #8)! 
    
   c. Create enriched Uranium material (90% of U235 and 10% of U238 isotopes) as
      a one component material with: name "Enriched U mat", density = 18.95*g/cm3 
      (see slide #7 for creating the enriched U element and slide #10 for 
      creating the single component material)    
  
  SOLUTIONS:
   a: 
   G4Material* matNistU = G4NistManager::Instance()->FindOrBuildMaterial("G4_U");  

   b:
   G4Material* matU = new G4Material("Natural U mat", 92, 238.03*g/mole, 18.95*g/cm3);

   c:
   G4Isotope* U5 = new G4Isotope("U235", 92, 235);
   G4Isotope* U8 = new G4Isotope("U238", 92, 238);
   G4Element* elU = new G4Element("enriched U elem", "U", 2);
   elU->AddIsotope(U5, 0.9);
   elU->AddIsotope(U8, 0.1);
   G4Material* matEnrichedU = new G4Material("Enriched U mat", 18.95*g/cm3, 1);
   matEnrichedU->AddElement(elU,1.0); 

   and printing them out:
   G4cout << matNistU     << G4endl;
   G4cout << matU         << G4endl;
   G4cout << matEnrichedU << G4endl;   

         
________________________________________________________________________________
4.
Print out all the materials constructed in the application at the beginning of 
the run!


  SOLUTIONS:
   Add the following lines at the beginning of the BeginOfRunAction(const G4Run*) 
   method of the run action of the application (i.e. the B1RunAction):
   
     B1RunAction::BeginOfRunAction(const G4Run*) {
        // print only in case of the master thread 
        if (IsMaster()) {
           G4out << *(G4Material::GetMaterialTable()) << G4endl;
        }
        ...
        ...
     }

   Build and run the application! 
